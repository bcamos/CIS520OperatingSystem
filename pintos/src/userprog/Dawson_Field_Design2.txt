		           +--------------------------+
			   |         CIS 520          |
		           | PROJECT 2: USER PROGRAMS |
		           |     DESIGN DOCUMENT      |
		           +--------------------------+

---- GROUP ----

>> Fill in the names of your group members.

Dawson Field
Ben Amos
Nathan Brown

---- PRELIMINARIES ----

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

https://static1.squarespace.com/static/5b18aa0955b02c1de94e4412/t/5b85fad2f950b7b16b7a2ed6/1535507195196/Pintos+Guide
countless youtube videos
https://github.com/Waqee/Pintos-Project-2

			   ARGUMENT PASSING
			   ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

No structs were added or changed

---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

i) Modified process_execute - Now thread will be created with only the filename, and not the whole command name+arguments passed
  at the command line. That information is retained in fn_copy, and then parsed in the load function.
  Then they are passed to the setup_stack function to be pushed onto the stack. 

ii) In load function - Count arguments and save in argc. Save arguments in argv[]. 
argv[0] will contain filename. strtok_r is used to parse the name+arguments and the parsed arguments are saved in argv.

iii) argv and argc are passed to setup_stack. Each time the stack pointer is decremented and arguments are pushed. 
Arguments are pushed in the right order one by one. This is the order used:

a) arguments - from argv[n] to argv[0]
b) word-align to 4 bytes
c) addresses of pointers to argv elements
d) address of argv
e) argc
f) fake return address

---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?

strtok_r() is reentrant - it allows the same string to be manipulated from 2 or more different places at the same time. 
It manages to do this by using an argument to save state instead of using a global variable like strtok().

>> A4: In Pintos, the kernel separates commands into an executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.

i) args and program name are parsed by the shell in UNIX approach, instead of being passed to the kernel, saving kernel time.
ii) the shell will setup the stack instead of having the kernel do it

			     SYSTEM CALLS
			     ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

In syscall.c:
	
#define arg0(STRUCT, ESP) ( *( (STRUCT *)(ESP + 4) ) )  
	- dereferences arg0
#define arg1(STRUCT, ESP) ( *( (STRUCT *)(ESP + 8) ) ) 
	- same here for arg1
#define arg2(STRUCT, ESP) ( *( (STRUCT *)(ESP + 12) ) )
	- and arg 2
#define MAX_FILENAME_LENGTH 14  
	- limit to the length of a filename
#define WHOLE_STRING -1
	- indicates if the entire string should be checked
	
In syscall.h:

struct lock file_lock;
	- locks file so that only one file can be accessed at a time
#define lock_files() (lock_acquire(&file_lock))
	- something ben wrote idk what it actually does
#define unlock_files() (lock_release(&file_lock))

In thread.h:

struct process_container // hold information about child process of a thread
{
    tid_t tid; // process id
    int exit_status; // exit status
    bool is_alive; // alive state
    struct semaphore waiting_threads; // semafore for parent process waiting
    struct list_elem elem; // list for storage

    bool loaded_successful; // load sucessful state
    struct semaphore load_sema; // semaphore for synchonrization


}; 

struct thread_file_container // attaches an id to a file that has been opened
{
    struct file* file; //opened file
    int fid; // id
    struct list_elem elem; // list for storage
};

Thread struct:

struct list my_files;
	- a list of opened files
int next_fid;
	- the next id number
struct list my_children_processes;
	- list of all child processes
int parent_tid; 
	- list of all parent threads
struct lock my_lock;

struct process_container* self;
	- pointer to a process
struct file* my_code;

bool is_kernal;
	- indicates if a thread is a kernel thread or not
	
>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

File descriptors are coded to open the files using the file description which uses a pointer and descriptor.
File descriptors are unique within a process.

---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

In syscall, it checks that the stack pointer is greater than or equal to the value of the PHYS_BASE static variable, this indicates that you are able to access kernel memory.


>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

From what i can tell, checking endpoints is an effective and efficient method of doing so.
If you dont know the size beforehand it probably wont work for all cases, but as long as you do know the size it will work fine.

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

Used a struct, process_container  to share memory between a parent and child. the container directly signifies this relationship and is used to execute process wait, in which it checks on the status of each and determines how to proceed from there.

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

In our code this is handled within the process_container, it has a semafore for the parent process and a bool to indicate if the process is loaded properly.

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

Exactly the same method as the exit status handling.

---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

Avoids creating new data structs.

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

It would be a lot more simple and likely more efficient if the file system was more condensed rather than scattered amongst files.

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

Its fine the way it works and it makes sense to me.

		           +---------------------------+
       	           |         CIS 520           |
		           | PROJECT 3: Virtual Memory |
		           |     DESIGN DOCUMENT       |
		           +---------------------------+

---- GROUP ----

>> Fill in the names of your group members.

Ben Amos
Dawson Field
Nathan Brown

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

We used the code (project3_recompiled) given in Canvas as our starting code, and provided implementations for the methods stubs within the code.
Our current solution passes all tests; however, there were a couple times that I edited a comment or something  and it caused 3 random tests to fail
unexpectantly. For the most part, our tests pass, however, there could be some sort of weird edge case we aren't addressing; i (Ben) have a screenshot of all our
tests passing if they don't pass on the autograde in the first batch.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

https://github.com/ChristianJHughes/pintos-project3/blob/master/pintos3/src/userprog/syscall.c
https://www.youtube.com/watch?v=M1FJvXgZhdo
https://static1.squarespace.com/static/5b18aa0955b02c1de94e4412/t/5b85fad2f950b7b16b7a2ed6/1535507195196/Pintos+Guide


			PAGE TABLE MANAGEMENT
			=====================

---- ALGORITHMS ----

>> A1: In a few paragraphs, describe the existing code for locating the
>> frame, if any, that contains the data of a given page.

Not entirely sure how to answer in terms of "existing" because vm was empty before project 3. This was implemented in this project.
On the assumption of algorithm of the additions this project: The struct 'page' contains the user's virtual address along
with a mapping to the physical/frame address in memory. 

To find a frame from virtual memory, the virtual address is passed to any of the paging functions; we lookup the page associated with that
address in the function page_for_addr, we have to adjust the address to the nearest pg boundary since the address could be anywhere within that page but not denoting the start of the page itself.
Once we find the page, if it exists, we then lookup the frame struct (a field of the page struct) and are able to find the physical/true memory there (ptr 'base' denotes the beginning of this frame within the frame struct). 

---- SYNCHRONIZATION ----

>> A2: When two user processes both need a new frame at the same time,
>> how are races avoided?

A global lock for frames, called 'scan_lock', which is grabbed whenever we are allocating or mapping frames to pages which prevents the race condition.

		       PAGING TO AND FROM DISK
		       =======================

---- ALGORITHMS ----

>> B1: When a frame is required but none is free, some frame must be
>> evicted.  Describe the algorithm used to choose a frame to evict.

If all of the frames are currently in use, our code determines an ideal frame to evict in order to free up a frame.
To do this we must evict the least recently accessed frame, the algorithm that does this is implemented in try_frame_alloc_and_lock() in 'frame.c'.
If the frame we are looking for has no associated page, then the algorithm acquires the frame. Else it acquires the least recently accessed frame.
If all frames have been accessed recently, the code iterates over all frames, in this case it is almost certain that a valid frame will be found due to the page_accessed_recently() function changing the access status of the frame when it is called.
If all of these cases fail and no valid frame is returned, a NULL case is returned and no frame will be evicted.


>> B2: Explain your heuristic for deciding whether a page fault for an
>> invalid virtual address should cause the stack to be extended into
>> the page that faulted.

First you must check that the address of the page boundary rounded down to the page boundary is within the stack space which is 1MB by default.
Then we must check that the page address unrounded is within 32bytes of the user_esp of the thread.
This checks on commands that manat the stack memory such as PUSH/PUSHA which can access memory up to 32 Bytes past the stack pointer.

			 MEMORY MAPPED FILES
			 ===================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

We didn't add/modify any new major data structs -- however from project 2 -> project 3 base code that we were given, 
a quick overview: 
	+struct page (denoting a virtual address which maps to a physical address frame, along with a few fields for file access/restrictions/locations etc.)
	+struct frame (container for physical address along with a lock for the region)
	struct thread was also added a list/hash of pages and mappings assoicated with that thread

---- ALGORITHMS ----

>> C2: Describe how memory mapped files integrate into your virtual
>> memory subsystem.  Explain how the page fault and eviction
>> processes differ between swap pages and other pages.

mmap uses the fd passed in as a parameter to map the open file into the virtual address space. 
When a page is evicted it means the page mapped by mmap writes the contents of the virtual page back to the file it was mapped from. 
When eviction is executed if pages have been modified they should be written to swap. 
In page fault, if the memory reference is valid then the supplemental page table entry is used to locate the data that goes in the page.
Any invalid access terminates the process and frees all resources. Page fault and eviction are both kernel processes that use swap pages to move data around and store changes to files if evicted. 

>> C3: Explain how you determine whether a new file mapping overlaps
>> any existing segment.

The page_allocate function will fail if the address parameter provided already exists. 
Page_allocation is called while the file length is not equal to 0. So if there is any overlap, page_allocate will fail and mmap will return -1. 

---- RATIONALE ----

>> C4: Mappings created with "mmap" have similar semantics to those of
>> data demand-paged from executables, except that "mmap" mappings are
>> written back to their original files, not to swap.  This implies
>> that much of their implementation can be shared.  Explain why your
>> implementation either does or does not share much of the code for
>> the two situations.

There is some overlap from the use of pages -- that is, the page functions are called to handle vm memory in the system calls, which is about the extent of the
"shared portion;" although it is also an important one because handling vm in two different ways might cause some inconsistency in mappings when backtracing.

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

We had a considerable amount of confusion in terms of the expectations of this project since originally we started with no vm code and Canvas was suggesting otherwise in FAQ in terms of changes necessary; 
i would definitely recommend adding a specific comment to the writeup for Project 3 for future semesters that mentions that starter code for vm is given -- 
otherwise, we were considerably confused since the pintos writeup has students do the entire project 3 from scratch. We were pretty excited to have the former, although were a bit stressed
from the uncertainty.

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
